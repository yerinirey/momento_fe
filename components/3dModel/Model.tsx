/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import { useGLTF } from "@react-three/drei";
import { useFrame } from "@react-three/fiber/native";
import { JSX, useEffect, useRef, useState } from "react";
import { useSharedValue, withTiming } from "react-native-reanimated";
import * as THREE from "three";

type ModelProps = JSX.IntrinsicElements["group"] & {
  modelUrl: string;
};

const Model = ({ modelUrl, ...props }: ModelProps) => {
  const y = useSharedValue(0);
  const group = useRef<THREE.Group>(null);
  const [mounted, setMounted] = useState(false);

  useGLTF.preload(modelUrl); // 미리 fetching, parsing - 렌더 부하 줄임
  //   const { nodes, materials, animations } = useGLTF(
  //     modelUrl
  //   ) as unknown as GLTFResult;
  const { scene } = useGLTF(modelUrl);
  //   const { actions } = useAnimations(animations, group);

  useEffect(() => {
    // actions[ActionName]?.play();
    y.value = withTiming(2, { duration: 2000 });
    setTimeout(() => setMounted(true), 1000);
  }, []);

  useFrame(() => {
    if (group.current) {
      group.current.rotation.set(0, y.value, 0);
    }
  });

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      position={[0, -0.5, 0]}
      scale={mounted ? 3 : 1}
    >
      <primitive object={scene} />
    </group>
  );
};

export default Model;
